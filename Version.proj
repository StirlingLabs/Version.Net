<!-- all projects should invoke ApplyGitInfo by default before building, compiling or packing artifacts -->
<Project>
    <!-- add package references to all including projects -->
    <ItemGroup>
        <PackageReference Include="Microsoft.Build.Tasks.Git" Version="1.0.0" PrivateAssets="All"/>
        <PackageReference Include="Microsoft.SourceLink.Common" Version="1.0.0" PrivateAssets="All"/>
    </ItemGroup>

    <!-- configuration for sourcelink and gitinfo -->
    <PropertyGroup>
        <PublishRepositoryUrl>true</PublishRepositoryUrl>
        <EnableSourceLink Condition="'$(RepositoryUrl)'!=''">true</EnableSourceLink>
        <ContinuousIntegrationBuild Condition="'$(ContinuousIntegrationBuild)'==''">false</ContinuousIntegrationBuild>
        <ContinuousIntegrationBuild Condition="'$(CI)'!=''">true</ContinuousIntegrationBuild>
        <DeterministicSourcePaths Condition="'$(ContinuousIntegrationBuild)'!=''">$(ContinuousIntegrationBuild)</DeterministicSourcePaths>
        <SymbolPackageFormat>snupkg</SymbolPackageFormat>
        <IncludeSourceRevisionInInformationalVersion>true</IncludeSourceRevisionInInformationalVersion>

        <!-- only set IncludeSymbols if DebugSymbols is also specified -->
        <IncludeSymbols Condition="'$(DebugSymbols)'!='false'">true</IncludeSymbols>
        <IncludeSymbols Condition="'$(DebugSymbols)'=='false'">false</IncludeSymbols>
    </PropertyGroup>

    <!-- constants -->
    <PropertyGroup>
        <SemVerRegex>v?(?&lt;MAJOR&gt;\d+)\.(?&lt;MINOR&gt;\d+)(?:\-(?&lt;LABEL&gt;[\dA-Za-z\-\.]+))?$|^v?(?&lt;MAJOR&gt;\d+)\.(?&lt;MINOR&gt;\d+)\.(?&lt;PATCH&gt;\d+)(?:\-(?&lt;LABEL&gt;[\dA-Za-z\-\.]+))?$|^(?&lt;LABEL&gt;[\dA-Za-z\-\.]+)\-v?(?&lt;MAJOR&gt;\d+)\.(?&lt;MINOR&gt;\d+)\.(?&lt;PATCH&gt;\d+)$</SemVerRegex>

        <!-- reports things like the resulting version string -->
        <VersionNetInfoImportance>high</VersionNetInfoImportance>

        <!-- set this to high for debugging output -->
        <VersionNetDebugImportance>low</VersionNetDebugImportance>
    </PropertyGroup>

    <!-- support for sourcelink to github -->
    <ItemGroup Condition="$(RepositoryUrl.StartsWith('https://github.com/'))">
        <PackageReference Include="Microsoft.SourceLink.GitHub" Version="1.0.0" PrivateAssets="All"/>
    </ItemGroup>

    <Target Name="GitFetchTags">
        <!-- first check if the repo is shallow -->
        <Exec ContinueOnError="true" IgnoreExitCode="true"
              StandardErrorImportance="low" StandardOutputImportance="low" EchoOff="true"
              Command="git rev-parse --is-shallow-repository">
            <Output TaskParameter="ExitCode" PropertyName="GitIsShallow"/>
        </Exec>

        <!-- if the repo is shallow, we need to fetch tags -->
        <Exec ContinueOnError="true" IgnoreExitCode="true" Condition="'$(GitIsShallow)'!='false'"
              StandardErrorImportance="low" StandardOutputImportance="low" EchoOff="true"
              Command="git fetch --force --update-shallow --depth 1 origin 'refs/tags/*:refs/tags/*'" />

        <!-- otherwise assume the tags are up to date for now -->
    </Target>

    <Target Name="CheckIfGitIsDirty">
        <!-- refresh the index -->
        <Exec ContinueOnError="true" IgnoreExitCode="true"
              StandardErrorImportance="low" StandardOutputImportance="low" EchoOff="true"
              Command="git update-index --refresh" />

        <!-- determine if there are any uncommitted changes -->
        <Exec ContinueOnError="true" IgnoreExitCode="true"
              StandardErrorImportance="low" StandardOutputImportance="low" EchoOff="true"
              Command="git diff-index --quiet HEAD --">
            <Output TaskParameter="ExitCode" PropertyName="GitIsDirty"/>
        </Exec>

        <PropertyGroup>
            <GitIsDirty Condition="'$(GitIsDirty)'=='1'">true</GitIsDirty>
            <GitIsDirty Condition="'$(GitIsDirty)'=='0'">false</GitIsDirty>
        </PropertyGroup>
        
        <!-- debugging output -->
        <Message Importance="$(VersionNetDebugImportance)" Text="GitIsDirty: $(GitIsDirty)" />
    </Target>

    <Target Name="PickGitBaseTag" DependsOnTargets="GitFetchTags;CheckIfGitIsDirty">
        <!-- windows has a thing about percent signs being for environment variable expansion -->
        <PropertyGroup>
            <EscPct>%</EscPct>
        </PropertyGroup>
        <PropertyGroup Condition="$(OS.StartsWith('Windows'))">
            <EscPct>%%</EscPct>
        </PropertyGroup>

        <Exec ContinueOnError="true" IgnoreExitCode="true" ConsoleToMsBuild="true"
              StandardErrorImportance="low" StandardOutputImportance="low" EchoOff="true"
              Command="git describe --tags --match=v[1-9]* HEAD">
            <Output TaskParameter="ConsoleOutput" PropertyName="GitDescribeTag"/>
        </Exec>

        <!-- constrain results of git describe -->
        <PropertyGroup>
            <GitDescribeTag>$([System.Text.RegularExpressions.Regex]::Match($(GitDescribeTag), '^v[^\.]+\.[^\.]+.[^\-]+(?:-[^\-]+)?').Value)</GitDescribeTag>
        </PropertyGroup>

        <!-- debugging output -->
        <Message Importance="$(VersionNetDebugImportance)" Text="GitDescribeTag: $(GitDescribeTag)" />

        <Exec ContinueOnError="true" IgnoreExitCode="true" ConsoleToMsBuild="true"
              StandardErrorImportance="low" StandardOutputImportance="low" EchoOff="true"
              Command="git describe --tags --match=v[1-9]* --exact-match HEAD">
            <Output TaskParameter="ConsoleOutput" PropertyName="GitDescribeMatch"/>
        </Exec>

        <!-- constrain results of git describe -->
        <PropertyGroup>
            <GitDescribeMatch>$([System.Text.RegularExpressions.Regex]::Match($(GitDescribeMatch), '^v.+').Value)</GitDescribeMatch>
        </PropertyGroup>

        <!-- debugging output -->
        <Message Importance="$(VersionNetDebugImportance)" Text="GitDescribeMatch: $(GitDescribeMatch)" />

        <!-- we picked a tag, extract components -->
        <PropertyGroup Condition="'$(GitDescribeTag)'!=''">
            <GitSemVerSource>Tag</GitSemVerSource>
            <GitBaseVersionMajor>$([System.Text.RegularExpressions.Regex]::Match($(GitDescribeTag), $(SemVerRegex)).Groups['MAJOR'].Value)</GitBaseVersionMajor>
            <GitBaseVersionMinor>$([System.Text.RegularExpressions.Regex]::Match($(GitDescribeTag), $(SemVerRegex)).Groups['MINOR'].Value)</GitBaseVersionMinor>
            <GitBaseVersionPatch>$([System.Text.RegularExpressions.Regex]::Match($(GitDescribeTag), $(SemVerRegex)).Groups['PATCH'].Value)</GitBaseVersionPatch>
            <GitBaseVersionLabel>$([System.Text.RegularExpressions.Regex]::Match($(GitDescribeTag), $(SemVerRegex)).Groups['LABEL'].Value)</GitBaseVersionLabel>
        </PropertyGroup>

        <!-- we did not pick a tag, set defaults -->
        <PropertyGroup Condition="'$(GitDescribeTag)'==''">
            <GitSemVerSource>Default</GitSemVerSource>
            <GitBaseVersionMajor>$([System.DateTime]::Now.ToString(`yy`))</GitBaseVersionMajor>
            <GitBaseVersionMinor>$([System.DateTime]::Now.ToString(`MM`))</GitBaseVersionMinor>
            <GitBaseVersionPatch>0</GitBaseVersionPatch>
            <GitSemVerPatch>0</GitSemVerPatch>
        </PropertyGroup>

        <!-- debugging output -->
        <Message Importance="$(VersionNetDebugImportance)" Text="GitBaseVersionMajor: $(GitBaseVersionMajor)" />
        <Message Importance="$(VersionNetDebugImportance)" Text="GitBaseVersionMinor: $(GitBaseVersionMinor)" />
        <Message Importance="$(VersionNetDebugImportance)" Text="GitBaseVersionPatch: $(GitBaseVersionPatch)" />
        <Message Importance="$(VersionNetDebugImportance)" Text="GitBaseVersionLabel: $(GitBaseVersionLabel)" />

        <!-- check if the tag is a prerelease by looking for an existing tag -->
        <Exec Condition="'$(GitBaseVersionLabel)'!=''" ContinueOnError="true" IgnoreExitCode="true" ConsoleToMsBuild="true"
              StandardErrorImportance="low" StandardOutputImportance="low" EchoOff="true"
              Command="git rev-parse -q --verify v$(GitBaseVersionMajor).$(GitBaseVersionMinor).$(GitBaseVersionPatch) --">
            <Output TaskParameter="ConsoleOutput" PropertyName="GitReleaseTagParseResult"/>
            <Output TaskParameter="ExitCode" PropertyName="GitReleaseTagParseExitCode"/>
        </Exec>

        <!-- debugging output -->
        <Message Importance="$(VersionNetDebugImportance)" Text="GitReleaseTagParseResult: $(GitReleaseTagParseResult)" />
        <Message Importance="$(VersionNetDebugImportance)" Text="GitReleaseTagParseExitCode: $(GitReleaseTagParseExitCode)" />

        <!-- if we're a pre-release, bump the patch and prefix the label -->
        <PropertyGroup Condition="'$(GitDescribeTag)'!='' And '$(GitDescribeMatch)'!='$(GitDescribeTag)'">
            <GitSemVerPatch>$([MsBuild]::Add($(GitBaseVersionPatch),1))</GitSemVerPatch>
            <GitSemVerLabel>pre-$(GitBaseVersionLabel)</GitSemVerLabel>
        </PropertyGroup>
        <!-- otherwise assume we're not a pre-release -->
        <PropertyGroup Condition="'$(GitDescribeTag)'!='' And '$(GitDescribeMatch)'=='$(GitDescribeTag)'">
            <GitSemVerPatch>$(GitBaseVersionPatch)</GitSemVerPatch>
            <GitSemVerLabel>$(GitBaseVersionLabel)</GitSemVerLabel>
            <GitSemVerPatch Condition="$(GitIsDirty)">$([MsBuild]::Add($(GitSemVerPatch),1))</GitSemVerPatch>
            <GitSemVerLabel Condition="$(GitIsDirty) And '$(GitBaseVersionLabel)' == ''">pre$(GitBaseVersionLabel)</GitSemVerLabel>
            <GitSemVerLabel Condition="$(GitIsDirty) And '$(GitBaseVersionLabel)' != ''">pre-$(GitBaseVersionLabel)</GitSemVerLabel>
        </PropertyGroup>

        <!-- the major and minor recommended versions will always be from the current date -->
        <PropertyGroup>
            <GitSemVerMajor>$([System.DateTime]::Now.ToString(`yy`))</GitSemVerMajor>
            <GitSemVerMinor>$([System.DateTime]::Now.ToString(`MM`))</GitSemVerMinor>
        </PropertyGroup>

        <!-- debugging output -->
        <Message Importance="$(VersionNetDebugImportance)" Text="Base Tag: v$(GitBaseVersionMajor).$(GitBaseVersionMinor).$(GitBaseVersionPatch)" />
        <Message Importance="$(VersionNetDebugImportance)" Text="Deduced Version: v$(GitSemVerMajor).$(GitSemVerMinor).$(GitSemVerPatch)" Condition="'$(GitSemVerLabel)'==''" />
        <Message Importance="$(VersionNetDebugImportance)" Text="Deduced Version: v$(GitSemVerMajor).$(GitSemVerMinor).$(GitSemVerPatch)-$(GitSemVerLabel)" Condition="'$(GitSemVerLabel)'!=''" />
    </Target>

    <!-- determine versioning scheme from tag and environment and apply it -->
    <Target Name="ApplyGitInfo" DependsOnTargets="CheckIfGitIsDirty;PickGitBaseTag;InitializeSourceControlInformation" BeforeTargets="BeforeBuild;Build;CoreCompile;Publish;Pack">

        <!-- create  hashes to help identify what machine built the artifact -->
        <ItemGroup>
            <MachineItemToHash Include="$([System.Environment]::MachineName)"/>
            <MachineItemToHash Include="$([System.Environment]::ProcessorCount)"/>
        </ItemGroup>
        <Hash ItemsToHash="@(MachineItemToHash)">
            <Output TaskParameter="HashResult" PropertyName="MachineUniqueHash"/>
        </Hash>

        <!-- debugging output -->
        <Message Importance="$(VersionNetDebugImportance)" Text="Machine Unique Hash: $(MachineUniqueHash)"/>

        <!-- create hashes to help identify what user built the artifact -->
        <ItemGroup>
            <UserItemToHash Include="$([System.Environment]::UserName)" Condition="'$(GITHUB_ACTOR)'==''"/>
            <UserItemToHash Include="$(GITHUB_ACTOR)" Condition="'$(GITHUB_ACTOR)'!=''"/>
        </ItemGroup>
        <Hash ItemsToHash="@(UserItemToHash)">
            <Output TaskParameter="HashResult" PropertyName="UserUniqueHash"/>
        </Hash>

        <!-- debugging output -->
        <Message Importance="$(VersionNetDebugImportance)" Text="User Unique Hash: $(UserUniqueHash)"/>

        <!-- create a timestamp that resolves to minutes since an epoch -->
        <PropertyGroup>
            <!-- to resolve one of these timestamps: https://dotnetfiddle.net/myVR4R -->
            <TimestampEpoch>637450560000000000</TimestampEpoch> <!-- jan 1st, 2021 -->
            <TimestampResolution>600000000</TimestampResolution> <!-- minutes -->
            <TimestampTicks>$([System.DateTime]::UtcNow.Ticks)</TimestampTicks>
            <TimestampInteger>$([System.Math]::Floor($([MsBuild]::Divide($([MsBuild]::Subtract($(TimestampTicks),$(TimestampEpoch))),$(TimestampResolution)))))</TimestampInteger>
            <Timestamp>$([System.UInt64]::Parse($(TimestampInteger)).ToString('x'))</Timestamp>
        </PropertyGroup>

        <!-- debugging output -->
        <Message Importance="$(VersionNetDebugImportance)" Text="Timestamp: $(TimestampInteger) -> $(Timestamp)"/>

        <!-- ultimately determine the version from the status of git -->
        <PropertyGroup>
            <!-- ci builds may mess with the working tree, pretend it's not dirty -->
            <GitIsDirty Condition="!$(GitIsDirty) And $(ContinuousIntegrationBuild)">false</GitIsDirty>
            
            <!-- build the version suffix accordingly -->
            <VersionSuffix Condition="$(GitIsDirty) And '$(VersionSuffix)'=='' And '$(GitSemVerLabel)'!=''">-$(GitSemVerLabel)-$(Timestamp)</VersionSuffix>
            <VersionSuffix Condition="$(GitIsDirty) And '$(VersionSuffix)'=='' And '$(GitSemVerLabel)'==''">-pre-$(Timestamp)</VersionSuffix>
            <VersionSuffix Condition="$(GitIsDirty)">$(VersionSuffix)+$(MachineUniqueHash.Substring(0,3))/$(UserUniqueHash.Substring(0,3))</VersionSuffix>
            
            <!-- clear erroneous 'v1.0.0' version prefix if set -->
            <VersionPrefix Condition="'$(VersionPrefix)'=='1.0.0'"/>

            <!-- the version suffix should include the label from the tag if not dirty -->
            <VersionSuffix Condition="'$(GitIsDirty)'=='0' And '$(GitSemVerLabel)'!=''">-$(GitSemVerLabel)$(VersionSuffix)</VersionSuffix>

            <!-- build the full semver 2.0 string
             - CI build or non-dirty: year.month.update+commit
             - non-CI dirty: year.month.update-pre-label-timestamp+machine+user.commit
             - note: sourcelink will append the commit hash as well as embed it in the assembly
             -->
            <Version>$(VersionPrefix)$(GitSemVerMajor).$(GitSemVerMinor).$(GitSemVerPatch)$(VersionSuffix)</Version>

            <!-- nupkg versions want the +... part removed -->
            <PackageVersion>$(Version.Split('+',2)[0])</PackageVersion>

            <!-- assembly versions don't support leading zeroes -->
            <GitSemVerMajorForAsmVer Condition="$(GitSemVerMajor.StartsWith('0'))">1$(GitSemVerMajor)</GitSemVerMajorForAsmVer>
            <GitSemVerMinorForAsmVer>$(GitSemVerMinor.TrimStart('0'))</GitSemVerMinorForAsmVer>
            <GitSemVerMinorForAsmVer Condition="'$(GitSemVerMinorForAsmVer)'==''">0</GitSemVerMinorForAsmVer>
            <AssemblyVersion>$(GitSemVerMajor).$(GitSemVerMinorForAsmVer).$(GitSemVerPatch)</AssemblyVersion>

            <!-- file versions have limited number ranges and no leading zeroes -->
            <FileVersion>$(AssemblyVersion).0</FileVersion>
        </PropertyGroup>

        <!-- report version information to user -->
        <Message Importance="$(VersionNetInfoImportance)" Text="Version: $(Version)"/>
        <Message Importance="$(VersionNetInfoImportance)" Text="Commit: $(SourceRevisionId)"/>
    </Target>

    <!-- user invoked creation of a tag in git -->
    <Target Name="CreateTag" DependsOnTargets="ApplyGitInfo">
        <!-- build the tag string; add the 'v' prefix and don't add any suffix to the tag -->
        <PropertyGroup>
            <NewTag>v$(GitSemVerMajor).$(GitSemVerMinor).$(GitSemVerPatch)</NewTag>
        </PropertyGroup>

        <!-- debugging output -->
        <Message Importance="$(VersionNetDebugImportance)" Text="Checking Tag: $(NewTag)"/>

        <!-- have git create a tag for this version -->
        <Exec Command="git tag $(NewTag)" ContinueOnError="true" IgnoreExitCode="true"
              StandardErrorImportance="low" StandardOutputImportance="low" EchoOff="true">
            <Output TaskParameter="ExitCode" PropertyName="GitCreateTagExitCode"/>
        </Exec>

        <!-- report to user tag was created if successful -->
        <Message Importance="high" Text="Created Tag: $(NewTag)" Condition="'$(GitCreateTagExitCode)'=='0'"/>
    </Target>
</Project>
